{
  "version": 3,
  "sources": ["../node_modules/.pnpm/@andreasphil+c8@https+++codeload.github.com+andreasphil+c8+tar.gz+dc5b1a066d22e95a5a5d931e5981784d19170db0/node_modules/@andreasphil/c8/src/lib.js", "../src/lib.js"],
  "sourcesContent": ["/* -------------------------------------------------- *\n * Types                                              *\n * -------------------------------------------------- */\n\n/**\n * @template T\n * @typedef {object} AttrDefinition\n * @prop {(val: string | null) => T} [parse]\n * @prop {(val: T) => string} [stringify]\n * @prop {() => string} [default]\n */\n\n/**\n * @template T\n * @typedef {{ [K in keyof T]: AttrDefinition<T[K]> }} Attrs\n */\n\n/* -------------------------------------------------- *\n * Utils                                              *\n * -------------------------------------------------- */\n\n/**\n * @template T\n * @param {AttrDefinition<T>} definition\n * @returns {AttrDefinition<T>}\n */\nexport function defineAttr(definition) {\n  return definition;\n}\n\n/**\n * @param {TemplateStringsArray} strings\n * @param {unknown[]} values\n * @returns {string}\n */\nconst tag = (strings, ...values) => String.raw({ raw: strings }, ...values);\n\n/**\n * Helper for HTML template strings. The tag does nothing, but using it will\n * allow syntax highlighting and formatting if your editor supports it.\n */\nexport const html = tag;\n\n/**\n * Helper for CSS template strings. The tag does nothing, but using it will\n * allow syntax highlighting and formatting if your editor supports it.\n */\nexport const css = tag;\n\n/* -------------------------------------------------- *\n * Component base class                               *\n * -------------------------------------------------- */\n\n/**\n * @template {Record<string, any>} Attrs\n * @template {Record<string, Element>} Refs\n * @template {Record<string, any>} Emits\n */\nexport class C8 extends HTMLElement {\n  /**\n   * Tag under which the component will be available after registering. Must be\n   * set and must be a valid custom element name.\n   *\n   * @type {string}\n   */\n  static tag = \"\";\n\n  /**\n   * Observed attributes of the component. The information in this property\n   * will be used to populate the instance's `attrs` property with the actual\n   * values of the attributes, and sync changes to the values back to the\n   * HTML.\n   *\n   * @type {Record<string, AttrDefinition<unknown>>}\n   */\n  static attrs = {};\n\n  /**\n   * The names of events that will automatically be listened to. This should\n   * return all event types that you intend to register via `data-on:<type>`\n   * attributes.\n   *\n   * @type {Array<keyof WindowEventMap | string>}\n   * @default []\n   */\n  static events = [];\n\n  /**\n   * Registers the component as a custom element. For compatibility, you can\n   * provide a tag name, otherwise the tag name will default to the value of\n   * `this.tag`.\n   *\n   * @param {string} [tag]\n   */\n  static define(tag = this.tag) {\n    if (!tag) throw new Error(\"Custom element must specify a tag name\");\n\n    customElements.define(tag, this);\n  }\n\n  /**\n   * Returns the attributes for which the component will be notified of\n   * changes. Note that this is intended to be used by the browser. You\n   * should describe the attributes you expect via `this.attrs` and\n   * usually won't need to touch this function.\n   *\n   * @returns {string[]}\n   */\n  static get observedAttributes() {\n    return Object.keys(this.attrs);\n  }\n\n  /**\n   * The component's stylesheet. This will be added to the shadow DOM's adopted\n   * stylesheets on initialization. Must be `undefined` if shadow DOM is disabled,\n   * otherwise an exception is thrown.\n   *\n   * @type {string | undefined}\n   * @default undefined\n   */\n  get styles() {\n    return undefined;\n  }\n\n  /**\n   * The component's template. This will be inserted into the custom element on\n   * initialization.\n   *\n   * @type {string}\n   */\n  get template() {\n    throw new Error(\"Custom element must specify a template\");\n  }\n\n  /**\n   * Reflected attributes. This will be populated automatically based on the\n   * attributes specified in the element's static `attrs` property.\n   *\n   * @type {Attrs}\n   */\n  attrs;\n\n  /**\n   * @type {ShadowRoot | this}\n   */\n  get #root() {\n    return this.shadowRoot ?? this;\n  }\n\n  constructor() {\n    super();\n\n    try {\n      this.attachShadow({ mode: \"open\" });\n    } catch {\n      // Shadow root has been disabled. Ignore; light DOM will be used\n      // automatically instead.\n    }\n  }\n\n  connectedCallback() {\n    this.#insertTemplate();\n    this.#adoptCss();\n    this.#registerAttributes();\n    this.#attachEvents();\n  }\n\n  /**\n   * Returns the element with that ref name. This will throw if no ref with\n   * that name was found.\n   *\n   * @template {keyof Refs} T\n   * @param {T} name\n   * @returns {Refs[T]}\n   */\n  ref(name) {\n    const el = this.maybeRef(name);\n    if (!el) throw new Error(`Ref with name ${String(name)} was not found`);\n    return el;\n  }\n\n  /**\n   * Returns the element with that ref name, or `undefined` if no ref with\n   * that name was found.\n   *\n   * @template {keyof Refs} T\n   * @param {T} name\n   * @returns {Refs[T]}\n   */\n  maybeRef(name) {\n    const el = this.#root.querySelector(`[data-ref=\"${String(name)}\"]`);\n\n    // @ts-expect-error Can't be sure, need to trust the user's typings\n    return el ?? undefined;\n  }\n\n  /**\n   * Returns all elements that are marked as refs.\n   *\n   * @returns {Partial<Refs>}\n   */\n  refs() {\n    const els = {};\n\n    this.#root.querySelectorAll(\"[data-ref]\").forEach((el) => {\n      if (el instanceof HTMLElement && el.dataset.ref) els[el.dataset.ref] = el;\n    });\n\n    return els;\n  }\n\n  /**\n   * Emits an event with the specified payload.\n   *\n   * @template {keyof Emits} T\n   * @param {T} name\n   * @param {Emits[T]} payload\n   */\n  emit(name, payload) {\n    const event = new CustomEvent(String(name), {\n      bubbles: true,\n      cancelable: true,\n      composed: true,\n      detail: payload,\n    });\n\n    this.dispatchEvent(event);\n  }\n\n  #insertTemplate() {\n    let templateEl;\n\n    if (this.template.startsWith(\"#\")) {\n      templateEl = document.querySelector(this.template);\n      if (!(templateEl instanceof HTMLTemplateElement)) {\n        throw new Error(`${this.template} is not a template element`);\n      }\n    } else {\n      templateEl = document.createElement(\"template\");\n      templateEl.innerHTML = this.template;\n    }\n\n    this.#root.appendChild(templateEl.content.cloneNode(true));\n  }\n\n  #adoptCss() {\n    if (!this.styles) return;\n\n    if (!(this.#root instanceof ShadowRoot)) {\n      throw new Error('CSS is not supported when \"shadow\" is disabled');\n    }\n\n    const styleSheet = new CSSStyleSheet();\n    styleSheet.replaceSync(this.styles);\n\n    this.#root.adoptedStyleSheets.push(styleSheet);\n  }\n\n  #attachEvents() {\n    /** @type {typeof C8} */\n    // @ts-expect-error\n    const { events } = this.constructor;\n\n    events.forEach((type) => {\n      this.#root.addEventListener(type, (event) => {\n        if (!(event.target instanceof HTMLElement)) return;\n\n        let target = event.target;\n        const handlerAttr = `on:${event.type}`;\n        const handlerSelector = `[data-${handlerAttr.replace(\":\", \"\\\\:\")}]`;\n\n        let handlerName = target.dataset[handlerAttr];\n        if (!handlerName && (target = target.closest(handlerSelector))) {\n          handlerName = target.dataset[handlerAttr];\n        }\n\n        this[handlerName]?.(event);\n      });\n    });\n  }\n\n  #registerAttributes() {\n    /** @type {typeof C8} */\n    // @ts-expect-error\n    const { attrs } = this.constructor;\n\n    // @ts-expect-error We'll populate the object below\n    this.attrs ??= {};\n\n    Object.entries(attrs).forEach(([name, def]) => {\n      const stringify = def.stringify ?? ((val) => val?.toString() ?? \"\");\n      const parse = def.parse ?? ((val) => val);\n\n      Object.defineProperty(this.attrs, name, {\n        get: () => parse(this.getAttribute(name)),\n        set: (val) => this.setAttribute(name, stringify(val)),\n      });\n\n      if (def.default && !this.getAttribute(name)) {\n        this.setAttribute(name, def.default());\n      }\n    });\n  }\n}\n", "import { C8, html } from \"@andreasphil/c8\";\n\n/* -------------------------------------------------- *\n * Types                                              *\n * -------------------------------------------------- */\n\n/**\n * @typedef {Partial<Pick<KeyboardEvent, \"key\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\">>} KeyboardShortcut\n */\n\n/**\n * @typedef Command\n *\n * @property {string} id The unique identifier of the command. Can be any string.\n *\n * @property {string} name The visible name of the command.\n *\n * @property {string[]} [alias] A list of aliases of the command. If the user\n *  searches for one of them, the alias will be treated as if it was the name\n *  of the command.\n *\n * @property {string} [chord] A unique combination of characters. If the user\n *  types those exact characters in the search field, the associated command\n *  will be shown prominently and highlighted.\n *\n * @property {string} [groupName] An additional label displayed before the name.\n *\n * @property {string | HTMLElement} [icon] Icon of the command. Should be a string\n *  (which will be inserted as text content) or an HTML element (which will be\n *  inserted as-is).\n *\n * @property {() => void} action Callback to run when the command is invoked.\n *\n * @property {number} [weight] Used for sorting. Items with a higher weight\n *  will always appear before items with a lower weight.\n */\n\n/**\n * @typedef CommandBarAttrs\n *\n * @property {boolean} allowRepeat When true, repeats the most recent command\n *  when \u2318. is pressed.\n *\n * @property {string} [emptyMessage] Changes the text of the message that is\n *  displayed when no results are found. Defaults to \"Sorry, couldn\u02BCt find\n *  anything.\"\n *\n * @property {KeyboardShortcut} [hotkey] Allows you to set a custom hotkey.\n *  Defaults to \u2318K.\n *\n * @property {number} [limitResults] Limits the number of results that are\n *  shown. Defaults to 10.\n *\n * @property {string} [placeholder] Changes the placeholder of the search field.\n *  Defaults to \"Search...\"\n */\n\n/**\n * @typedef CommandBarRefs\n *\n * @property {HTMLDialogElement} host\n * @property {HTMLLabelElement} searchLabel\n * @property {HTMLInputElement} search\n * @property {HTMLUListElement} results\n * @property {HTMLParagraphElement} emptyMessage\n */\n\n/* -------------------------------------------------- *\n * Utils                                              *\n * -------------------------------------------------- */\n\n// From https://lucide.dev, licensed under the ISC License.\n//\n// Copyright (c) for portions of Lucide are held by Cole Bemis 2013-2022 as\n// part of Feather (MIT). All other copyright (c) for Lucide are held by\n// Lucide Contributors 2022.\nconst frown =\n  '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-frown\"><circle cx=\"12\" cy=\"12\" r=\"10\"/><path d=\"M16 16s-1.5-2-4-2-4 2-4 2\"/><line x1=\"9\" x2=\"9.01\" y1=\"9\" y2=\"9\"/><line x1=\"15\" x2=\"15.01\" y1=\"9\" y2=\"9\"/></svg>';\n\n/**\n * Takes an SVG string and converts it into an HTML element. Useful for\n * displaying icons in the command bar.\n *\n * @param {string} svg\n * @returns {HTMLElement}\n */\nexport function renderSvgFromString(svg) {\n  return new DOMParser().parseFromString(svg, \"image/svg+xml\").documentElement;\n}\n\n/* -------------------------------------------------- *\n * Functionality                                      *\n * -------------------------------------------------- */\n\n/** @extends {C8<CommandBarAttrs, CommandBarRefs, never>} */\nexport class CommandBar extends C8 {\n  static tag = \"command-bar\";\n\n  static disabledFeatures = [\"shadow\"];\n\n  /** @type {import(\"@andreasphil/c8\").Attrs<CommandBarAttrs>} */\n  static attrs = {\n    allowRepeat: { parse: Boolean, default: () => \"true\" },\n\n    emptyMessage: {\n      parse: String,\n      default: () => \"Sorry, couldn\u02BCt find anything.\",\n    },\n\n    limitResults: { parse: Number, default: () => \"10\" },\n\n    placeholder: { parse: String, default: () => \"Search...\" },\n\n    hotkey: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n      default: () => '{\"key\":\"k\",\"metaKey\":true}',\n    },\n  };\n\n  /** @type {Array<keyof HTMLElementEventMap>} */\n  static events = [\"close\", \"input\", \"click\"];\n\n  get template() {\n    return html`\n      <dialog class=\"cb__dialog\" data-ref=\"host\" data-on:close=\"onDialogClose\">\n        <header class=\"cb__header\">\n          <label>\n            <span data-hidden data-ref=\"searchLabel\"></span>\n            <input\n              type=\"search\"\n              data-ref=\"search\"\n              data-on:input=\"onSearch\"\n              required\n            />\n          </label>\n        </header>\n\n        <div class=\"cb__body\" data-with-fallback>\n          <ul class=\"cb__results-list\" data-ref=\"results\"></ul>\n\n          <div data-when=\"empty\">\n            <p>${frown}</p>\n            <p data-ref=\"emptyMessage\"></p>\n          </div>\n        </div>\n      </dialog>\n    `;\n  }\n\n  static get instance() {\n    const instance = document.querySelectorAll(this.tag);\n\n    if (instance[0] instanceof CommandBar) {\n      if (instance.length > 1) {\n        console.warn(\"Found multiple CommandBars. Only the first is returned.\");\n      }\n      return instance[0];\n    } else {\n      throw new Error(\"No CommandBar instance found.\");\n    }\n  }\n\n  /* -------------------------------------------------- *\n   * Lifecycle                                          *\n   * -------------------------------------------------- */\n\n  #disconnectedController = new AbortController();\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    addEventListener(\"keydown\", (e) => this.#onToggleShortcut(e), {\n      signal: this.#disconnectedController.signal,\n    });\n\n    addEventListener(\"keydown\", (e) => this.#onGlobalKeydown(e), {\n      signal: this.#disconnectedController.signal,\n    });\n\n    this.updatePlaceholder();\n    this.updateEmptyMessage();\n  }\n\n  disconnectedCallback() {\n    this.#disconnectedController.abort();\n  }\n\n  /**\n   * @template {keyof CommandBarAttrs} T\n   * @param {T} name\n   */\n  attributeChangedCallback(name) {\n    switch (name.toLowerCase()) {\n      case \"placeholder\":\n        this.updatePlaceholder();\n        break;\n      case \"emptymessage\":\n        this.updateEmptyMessage();\n        break;\n    }\n  }\n\n  /** @param {KeyboardEvent} event */\n  #onGlobalKeydown(event) {\n    // Run if the command bar is closed\n    if (event.key === \".\" && event.metaKey) {\n      this.#runMostRecent();\n      event.preventDefault();\n    }\n\n    if (!this.#open) return;\n    let cancel = true;\n\n    // Run if the command bar is open\n    if (event.key === \"Escape\") {\n      this.#onEsc();\n    } else if (event.key === \"ArrowUp\") {\n      this.#moveFocusUp();\n    } else if (event.key === \"ArrowDown\") {\n      this.#moveFocusDown();\n    } else if (event.key === \"Enter\") {\n      this.#runFocusedCommand();\n    } else {\n      cancel = false;\n    }\n\n    if (cancel) event.preventDefault();\n  }\n\n  /* -------------------------------------------------- *\n   * State                                              *\n   * -------------------------------------------------- */\n\n  #open = false;\n\n  /** @type {Command[]} */\n  #commands = [];\n\n  /** @type {Map<string, Command>} */\n  #chords = new Map();\n\n  /** @type {Command | null} */\n  #mostRecent = null;\n\n  #query = \"\";\n\n  #focusedResult = 0;\n\n  /** @param {string} value */\n  #setQuery(value) {\n    this.#query = value;\n    this.#setFocusedResult(0);\n\n    this.ref(\"search\").value = value;\n    this.#updateResults();\n  }\n\n  /** @param {number} value */\n  #setFocusedResult(value) {\n    this.#focusedResult = value;\n\n    const results = this.ref(\"results\").querySelectorAll(\"button\");\n    results.forEach((result, i) => {\n      if (i === value) result.classList.add(\"cb__result--focused\");\n      else result.classList.remove(\"cb__result--focused\");\n    });\n  }\n\n  #toggle(open = !this.#open) {\n    if (open === this.#open) return;\n    else if (open) {\n      this.ref(\"host\").showModal();\n      this.#open = true;\n    } else {\n      this.ref(\"host\").close();\n      this.#setFocusedResult(0);\n      this.#open = false;\n      this.#setQuery(\"\");\n    }\n  }\n\n  /* -------------------------------------------------- *\n   * Rendering                                          *\n   * -------------------------------------------------- */\n\n  /**\n   * @private Cannot be strictly private for Vue compat reasons, but should be\n   *  treated as internal.\n   */\n  updatePlaceholder() {\n    this.ref(\"searchLabel\").textContent = this.attrs.placeholder;\n    this.ref(\"search\").setAttribute(\"placeholder\", this.attrs.placeholder);\n  }\n\n  /**\n   * @private Cannot be strictly private for Vue compat reasons, but should be\n   *  treated as internal.\n   */\n  updateEmptyMessage() {\n    this.ref(\"emptyMessage\").textContent = this.attrs.emptyMessage;\n  }\n\n  #updateResults() {\n    this.ref(\"results\").innerHTML = \"\";\n\n    this.#getFilteredCommands().forEach((command, i) => {\n      const el = this.#renderCommand(command, {\n        focused: i === this.#focusedResult,\n        chordMatch: this.#query === command.chord,\n      });\n\n      this.ref(\"results\").appendChild(el);\n    });\n  }\n\n  /**\n   * @param {Command} command\n   * @param {{ focused: boolean, chordMatch: boolean }} state\n   */\n  #renderCommand(command, state) {\n    const itemClass = [\n      \"cb__result\",\n      state.focused && \"cb__result--focused\",\n      state.chordMatch && \"cb__result--chord-match\",\n    ];\n\n    const host = document.createElement(\"li\");\n\n    const button = document.createElement(\"button\");\n    button.classList.add(...itemClass.filter((i) => !!i));\n    button.addEventListener(\"click\", () => this.#runCommand(command));\n\n    if (command.icon) button.append(command.icon);\n\n    if (command.groupName) {\n      const groupName = document.createElement(\"span\");\n      groupName.classList.add(\"cb__group-name\");\n      groupName.textContent = command.groupName;\n      button.appendChild(groupName);\n\n      const groupCaret = document.createElement(\"span\");\n      groupCaret.classList.add(\"cb__group-name\");\n      groupCaret.textContent = \"\u203A\";\n      button.appendChild(groupCaret);\n    }\n\n    const title = document.createElement(\"span\");\n    title.dataset.clamp = \"\";\n    title.title = command.name;\n    title.textContent = command.name;\n    button.appendChild(title);\n\n    if (command.chord) {\n      const chord = document.createElement(\"span\");\n      chord.classList.add(\"cb__chord\");\n      chord.textContent = command.chord;\n      button.appendChild(chord);\n    }\n\n    host.appendChild(button);\n    return host;\n  }\n\n  /* -------------------------------------------------- *\n   * Visibility                                         *\n   * -------------------------------------------------- */\n\n  open(initialQuery = \"\") {\n    this.#toggle(true);\n    this.#setQuery(initialQuery);\n  }\n\n  onDialogClose() {\n    this.#open = false;\n  }\n\n  #onEsc() {\n    if (this.#query) {\n      this.#setQuery(\"\");\n    } else this.#toggle(false);\n  }\n\n  /** @param {KeyboardEvent} event */\n  #onToggleShortcut(event) {\n    const strictHotkey = Object.assign(\n      {\n        altKey: false,\n        ctrlKey: false,\n        metaKey: false,\n        shiftKey: false,\n        key: \"\",\n      },\n      this.attrs.hotkey\n    );\n\n    let match = Object.entries(strictHotkey).reduce((match, [key, value]) => {\n      return match && event[key] === value;\n    }, true);\n\n    if (!match) return;\n\n    this.#toggle();\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /* -------------------------------------------------- *\n   * Command registration                               *\n   * -------------------------------------------------- */\n\n  /**\n   * @param {Command[]} toRegister\n   * @returns {() => void}\n   */\n  registerCommand(...toRegister) {\n    const ids = toRegister.map((c) => c.id);\n    this.removeCommand(...ids);\n    this.#commands = [...this.#commands, ...toRegister];\n\n    toRegister.forEach((command) => {\n      if (command.chord) this.#chords.set(command.chord, command);\n    });\n\n    return () => {\n      this.removeCommand(...ids);\n    };\n  }\n\n  /** @param {string[]} toRemove */\n  removeCommand(...toRemove) {\n    this.#commands = this.#commands.filter((c) => !toRemove.includes(c.id));\n\n    this.#chords.forEach((command, chord) => {\n      if (toRemove.includes(command.id)) this.#chords.delete(chord);\n    });\n\n    if (this.#mostRecent && toRemove.includes(this.#mostRecent.id)) {\n      this.#mostRecent = null;\n    }\n  }\n\n  /* -------------------------------------------------- *\n   * Searching and running                              *\n   * -------------------------------------------------- */\n\n  /** @param {InputEvent} event */\n  onSearch(event) {\n    if (!(event.target instanceof HTMLInputElement)) return;\n    this.#setQuery(event.target.value);\n  }\n\n  #getFilteredCommands() {\n    if (!this.#query) return [];\n\n    const matchingChord = this.#chords.get(this.#query);\n    const queryTokens = this.#query.toLowerCase().split(\" \");\n\n    const result = this.#commands\n      .filter((i) => {\n        // Do not include the same item twice if it's already included via chord\n        if (matchingChord && matchingChord.id === i.id) return false;\n\n        const commandStr = [i.name, ...(i.alias ?? []), i.groupName ?? \"\"]\n          .join(\" \")\n          .toLowerCase();\n\n        return queryTokens.every((token) => commandStr.includes(token));\n      })\n      .slice(0, this.attrs.limitResults)\n      .sort((a, b) => (b.weight ?? 0) - (a.weight ?? 0));\n\n    if (matchingChord) result.unshift(matchingChord);\n\n    return result;\n  }\n\n  #moveFocusDown() {\n    const commandCount = this.#getFilteredCommands().length;\n    if (commandCount === 0) return;\n\n    const next = this.#focusedResult + 1;\n    this.#setFocusedResult(Math.min(commandCount - 1, next));\n  }\n\n  #moveFocusUp() {\n    this.#setFocusedResult(Math.max(this.#focusedResult - 1, 0));\n  }\n\n  #runFocusedCommand() {\n    const focused = this.#getFilteredCommands().at(this.#focusedResult);\n    if (focused) this.#runCommand(focused);\n  }\n\n  #runMostRecent() {\n    if (this.#mostRecent && this.attrs.allowRepeat) {\n      this.#runCommand(this.#mostRecent);\n    }\n  }\n\n  /** @param {Command} command */\n  #runCommand(command) {\n    command.action();\n    this.#mostRecent = command;\n    this.#toggle(false);\n  }\n}\n"],
  "mappings": "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",
  "names": ["tag", "strings", "values", "html", "C8", "tag", "#root", "#insertTemplate", "#adoptCss", "#registerAttributes", "#attachEvents", "name", "el", "els", "payload", "event", "templateEl", "styleSheet", "events", "type", "target", "handlerAttr", "handlerSelector", "handlerName", "attrs", "def", "stringify", "val", "parse", "frown", "renderSvgFromString", "svg", "CommandBar", "_CommandBar", "u", "instance", "#disconnectedController", "e", "#onToggleShortcut", "#onGlobalKeydown", "name", "event", "#runMostRecent", "#open", "cancel", "#onEsc", "#moveFocusUp", "#moveFocusDown", "#runFocusedCommand", "#commands", "#chords", "#mostRecent", "#query", "#focusedResult", "#setQuery", "value", "#setFocusedResult", "#updateResults", "result", "#toggle", "open", "#getFilteredCommands", "command", "i", "el", "#renderCommand", "state", "itemClass", "host", "button", "#runCommand", "groupName", "groupCaret", "title", "chord", "initialQuery", "strictHotkey", "match", "key", "toRegister", "ids", "c", "toRemove", "matchingChord", "queryTokens", "commandStr", "token", "a", "b", "commandCount", "next", "focused"]
}
